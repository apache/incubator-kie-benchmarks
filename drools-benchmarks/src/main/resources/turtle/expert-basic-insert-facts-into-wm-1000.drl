package org.drools.benchmarks.bre;
import org.drools.benchmarks.domain.*;
dialect "mvel"

rule "Insert address from each Customer_200"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_200")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 200 + i));
    }
end
rule "Insert all accounts from each Customer_200"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_200")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 200 + i));
    }
end
rule "Insert sending account from each Transaction_200"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_200")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 200 + i));
    }
end
rule "Insert receiving account from each Transaction_200"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_200")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 200 + i))
    }
end
rule "Insert owner from each Credit card_200"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_200")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 200 + i));
    }
end

rule "Insert address from each Customer_199"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_199")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 199 + i));
    }
end
rule "Insert all accounts from each Customer_199"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_199")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 199 + i));
    }
end
rule "Insert sending account from each Transaction_199"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_199")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 199 + i));
    }
end
rule "Insert receiving account from each Transaction_199"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_199")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 199 + i))
    }
end
rule "Insert owner from each Credit card_199"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_199")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 199 + i));
    }
end

rule "Insert address from each Customer_198"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_198")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 198 + i));
    }
end
rule "Insert all accounts from each Customer_198"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_198")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 198 + i));
    }
end
rule "Insert sending account from each Transaction_198"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_198")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 198 + i));
    }
end
rule "Insert receiving account from each Transaction_198"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_198")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 198 + i))
    }
end
rule "Insert owner from each Credit card_198"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_198")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 198 + i));
    }
end

rule "Insert address from each Customer_197"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_197")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 197 + i));
    }
end
rule "Insert all accounts from each Customer_197"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_197")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 197 + i));
    }
end
rule "Insert sending account from each Transaction_197"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_197")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 197 + i));
    }
end
rule "Insert receiving account from each Transaction_197"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_197")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 197 + i))
    }
end
rule "Insert owner from each Credit card_197"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_197")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 197 + i));
    }
end

rule "Insert address from each Customer_196"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_196")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 196 + i));
    }
end
rule "Insert all accounts from each Customer_196"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_196")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 196 + i));
    }
end
rule "Insert sending account from each Transaction_196"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_196")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 196 + i));
    }
end
rule "Insert receiving account from each Transaction_196"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_196")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 196 + i))
    }
end
rule "Insert owner from each Credit card_196"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_196")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 196 + i));
    }
end

rule "Insert address from each Customer_195"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_195")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 195 + i));
    }
end
rule "Insert all accounts from each Customer_195"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_195")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 195 + i));
    }
end
rule "Insert sending account from each Transaction_195"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_195")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 195 + i));
    }
end
rule "Insert receiving account from each Transaction_195"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_195")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 195 + i))
    }
end
rule "Insert owner from each Credit card_195"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_195")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 195 + i));
    }
end

rule "Insert address from each Customer_194"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_194")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 194 + i));
    }
end
rule "Insert all accounts from each Customer_194"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_194")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 194 + i));
    }
end
rule "Insert sending account from each Transaction_194"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_194")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 194 + i));
    }
end
rule "Insert receiving account from each Transaction_194"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_194")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 194 + i))
    }
end
rule "Insert owner from each Credit card_194"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_194")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 194 + i));
    }
end

rule "Insert address from each Customer_193"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_193")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 193 + i));
    }
end
rule "Insert all accounts from each Customer_193"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_193")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 193 + i));
    }
end
rule "Insert sending account from each Transaction_193"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_193")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 193 + i));
    }
end
rule "Insert receiving account from each Transaction_193"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_193")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 193 + i))
    }
end
rule "Insert owner from each Credit card_193"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_193")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 193 + i));
    }
end

rule "Insert address from each Customer_192"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_192")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 192 + i));
    }
end
rule "Insert all accounts from each Customer_192"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_192")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 192 + i));
    }
end
rule "Insert sending account from each Transaction_192"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_192")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 192 + i));
    }
end
rule "Insert receiving account from each Transaction_192"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_192")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 192 + i))
    }
end
rule "Insert owner from each Credit card_192"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_192")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 192 + i));
    }
end

rule "Insert address from each Customer_191"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_191")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 191 + i));
    }
end
rule "Insert all accounts from each Customer_191"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_191")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 191 + i));
    }
end
rule "Insert sending account from each Transaction_191"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_191")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 191 + i));
    }
end
rule "Insert receiving account from each Transaction_191"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_191")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 191 + i))
    }
end
rule "Insert owner from each Credit card_191"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_191")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 191 + i));
    }
end

rule "Insert address from each Customer_190"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_190")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 190 + i));
    }
end
rule "Insert all accounts from each Customer_190"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_190")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 190 + i));
    }
end
rule "Insert sending account from each Transaction_190"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_190")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 190 + i));
    }
end
rule "Insert receiving account from each Transaction_190"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_190")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 190 + i))
    }
end
rule "Insert owner from each Credit card_190"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_190")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 190 + i));
    }
end

rule "Insert address from each Customer_189"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_189")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 189 + i));
    }
end
rule "Insert all accounts from each Customer_189"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_189")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 189 + i));
    }
end
rule "Insert sending account from each Transaction_189"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_189")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 189 + i));
    }
end
rule "Insert receiving account from each Transaction_189"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_189")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 189 + i))
    }
end
rule "Insert owner from each Credit card_189"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_189")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 189 + i));
    }
end

rule "Insert address from each Customer_188"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_188")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 188 + i));
    }
end
rule "Insert all accounts from each Customer_188"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_188")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 188 + i));
    }
end
rule "Insert sending account from each Transaction_188"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_188")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 188 + i));
    }
end
rule "Insert receiving account from each Transaction_188"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_188")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 188 + i))
    }
end
rule "Insert owner from each Credit card_188"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_188")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 188 + i));
    }
end

rule "Insert address from each Customer_187"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_187")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 187 + i));
    }
end
rule "Insert all accounts from each Customer_187"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_187")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 187 + i));
    }
end
rule "Insert sending account from each Transaction_187"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_187")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 187 + i));
    }
end
rule "Insert receiving account from each Transaction_187"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_187")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 187 + i))
    }
end
rule "Insert owner from each Credit card_187"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_187")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 187 + i));
    }
end

rule "Insert address from each Customer_186"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_186")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 186 + i));
    }
end
rule "Insert all accounts from each Customer_186"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_186")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 186 + i));
    }
end
rule "Insert sending account from each Transaction_186"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_186")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 186 + i));
    }
end
rule "Insert receiving account from each Transaction_186"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_186")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 186 + i))
    }
end
rule "Insert owner from each Credit card_186"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_186")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 186 + i));
    }
end

rule "Insert address from each Customer_185"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_185")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 185 + i));
    }
end
rule "Insert all accounts from each Customer_185"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_185")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 185 + i));
    }
end
rule "Insert sending account from each Transaction_185"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_185")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 185 + i));
    }
end
rule "Insert receiving account from each Transaction_185"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_185")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 185 + i))
    }
end
rule "Insert owner from each Credit card_185"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_185")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 185 + i));
    }
end

rule "Insert address from each Customer_184"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_184")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 184 + i));
    }
end
rule "Insert all accounts from each Customer_184"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_184")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 184 + i));
    }
end
rule "Insert sending account from each Transaction_184"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_184")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 184 + i));
    }
end
rule "Insert receiving account from each Transaction_184"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_184")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 184 + i))
    }
end
rule "Insert owner from each Credit card_184"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_184")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 184 + i));
    }
end

rule "Insert address from each Customer_183"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_183")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 183 + i));
    }
end
rule "Insert all accounts from each Customer_183"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_183")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 183 + i));
    }
end
rule "Insert sending account from each Transaction_183"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_183")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 183 + i));
    }
end
rule "Insert receiving account from each Transaction_183"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_183")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 183 + i))
    }
end
rule "Insert owner from each Credit card_183"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_183")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 183 + i));
    }
end

rule "Insert address from each Customer_182"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_182")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 182 + i));
    }
end
rule "Insert all accounts from each Customer_182"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_182")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 182 + i));
    }
end
rule "Insert sending account from each Transaction_182"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_182")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 182 + i));
    }
end
rule "Insert receiving account from each Transaction_182"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_182")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 182 + i))
    }
end
rule "Insert owner from each Credit card_182"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_182")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 182 + i));
    }
end

rule "Insert address from each Customer_181"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_181")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 181 + i));
    }
end
rule "Insert all accounts from each Customer_181"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_181")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 181 + i));
    }
end
rule "Insert sending account from each Transaction_181"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_181")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 181 + i));
    }
end
rule "Insert receiving account from each Transaction_181"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_181")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 181 + i))
    }
end
rule "Insert owner from each Credit card_181"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_181")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 181 + i));
    }
end

rule "Insert address from each Customer_180"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_180")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 180 + i));
    }
end
rule "Insert all accounts from each Customer_180"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_180")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 180 + i));
    }
end
rule "Insert sending account from each Transaction_180"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_180")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 180 + i));
    }
end
rule "Insert receiving account from each Transaction_180"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_180")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 180 + i))
    }
end
rule "Insert owner from each Credit card_180"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_180")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 180 + i));
    }
end

rule "Insert address from each Customer_179"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_179")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 179 + i));
    }
end
rule "Insert all accounts from each Customer_179"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_179")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 179 + i));
    }
end
rule "Insert sending account from each Transaction_179"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_179")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 179 + i));
    }
end
rule "Insert receiving account from each Transaction_179"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_179")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 179 + i))
    }
end
rule "Insert owner from each Credit card_179"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_179")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 179 + i));
    }
end

rule "Insert address from each Customer_178"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_178")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 178 + i));
    }
end
rule "Insert all accounts from each Customer_178"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_178")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 178 + i));
    }
end
rule "Insert sending account from each Transaction_178"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_178")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 178 + i));
    }
end
rule "Insert receiving account from each Transaction_178"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_178")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 178 + i))
    }
end
rule "Insert owner from each Credit card_178"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_178")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 178 + i));
    }
end

rule "Insert address from each Customer_177"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_177")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 177 + i));
    }
end
rule "Insert all accounts from each Customer_177"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_177")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 177 + i));
    }
end
rule "Insert sending account from each Transaction_177"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_177")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 177 + i));
    }
end
rule "Insert receiving account from each Transaction_177"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_177")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 177 + i))
    }
end
rule "Insert owner from each Credit card_177"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_177")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 177 + i));
    }
end

rule "Insert address from each Customer_176"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_176")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 176 + i));
    }
end
rule "Insert all accounts from each Customer_176"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_176")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 176 + i));
    }
end
rule "Insert sending account from each Transaction_176"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_176")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 176 + i));
    }
end
rule "Insert receiving account from each Transaction_176"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_176")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 176 + i))
    }
end
rule "Insert owner from each Credit card_176"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_176")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 176 + i));
    }
end

rule "Insert address from each Customer_175"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_175")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 175 + i));
    }
end
rule "Insert all accounts from each Customer_175"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_175")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 175 + i));
    }
end
rule "Insert sending account from each Transaction_175"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_175")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 175 + i));
    }
end
rule "Insert receiving account from each Transaction_175"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_175")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 175 + i))
    }
end
rule "Insert owner from each Credit card_175"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_175")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 175 + i));
    }
end

rule "Insert address from each Customer_174"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_174")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 174 + i));
    }
end
rule "Insert all accounts from each Customer_174"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_174")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 174 + i));
    }
end
rule "Insert sending account from each Transaction_174"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_174")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 174 + i));
    }
end
rule "Insert receiving account from each Transaction_174"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_174")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 174 + i))
    }
end
rule "Insert owner from each Credit card_174"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_174")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 174 + i));
    }
end

rule "Insert address from each Customer_173"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_173")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 173 + i));
    }
end
rule "Insert all accounts from each Customer_173"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_173")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 173 + i));
    }
end
rule "Insert sending account from each Transaction_173"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_173")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 173 + i));
    }
end
rule "Insert receiving account from each Transaction_173"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_173")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 173 + i))
    }
end
rule "Insert owner from each Credit card_173"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_173")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 173 + i));
    }
end

rule "Insert address from each Customer_172"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_172")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 172 + i));
    }
end
rule "Insert all accounts from each Customer_172"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_172")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 172 + i));
    }
end
rule "Insert sending account from each Transaction_172"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_172")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 172 + i));
    }
end
rule "Insert receiving account from each Transaction_172"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_172")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 172 + i))
    }
end
rule "Insert owner from each Credit card_172"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_172")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 172 + i));
    }
end

rule "Insert address from each Customer_171"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_171")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 171 + i));
    }
end
rule "Insert all accounts from each Customer_171"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_171")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 171 + i));
    }
end
rule "Insert sending account from each Transaction_171"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_171")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 171 + i));
    }
end
rule "Insert receiving account from each Transaction_171"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_171")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 171 + i))
    }
end
rule "Insert owner from each Credit card_171"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_171")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 171 + i));
    }
end

rule "Insert address from each Customer_170"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_170")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 170 + i));
    }
end
rule "Insert all accounts from each Customer_170"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_170")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 170 + i));
    }
end
rule "Insert sending account from each Transaction_170"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_170")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 170 + i));
    }
end
rule "Insert receiving account from each Transaction_170"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_170")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 170 + i))
    }
end
rule "Insert owner from each Credit card_170"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_170")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 170 + i));
    }
end

rule "Insert address from each Customer_169"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_169")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 169 + i));
    }
end
rule "Insert all accounts from each Customer_169"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_169")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 169 + i));
    }
end
rule "Insert sending account from each Transaction_169"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_169")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 169 + i));
    }
end
rule "Insert receiving account from each Transaction_169"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_169")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 169 + i))
    }
end
rule "Insert owner from each Credit card_169"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_169")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 169 + i));
    }
end

rule "Insert address from each Customer_168"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_168")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 168 + i));
    }
end
rule "Insert all accounts from each Customer_168"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_168")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 168 + i));
    }
end
rule "Insert sending account from each Transaction_168"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_168")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 168 + i));
    }
end
rule "Insert receiving account from each Transaction_168"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_168")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 168 + i))
    }
end
rule "Insert owner from each Credit card_168"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_168")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 168 + i));
    }
end

rule "Insert address from each Customer_167"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_167")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 167 + i));
    }
end
rule "Insert all accounts from each Customer_167"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_167")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 167 + i));
    }
end
rule "Insert sending account from each Transaction_167"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_167")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 167 + i));
    }
end
rule "Insert receiving account from each Transaction_167"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_167")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 167 + i))
    }
end
rule "Insert owner from each Credit card_167"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_167")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 167 + i));
    }
end

rule "Insert address from each Customer_166"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_166")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 166 + i));
    }
end
rule "Insert all accounts from each Customer_166"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_166")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 166 + i));
    }
end
rule "Insert sending account from each Transaction_166"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_166")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 166 + i));
    }
end
rule "Insert receiving account from each Transaction_166"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_166")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 166 + i))
    }
end
rule "Insert owner from each Credit card_166"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_166")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 166 + i));
    }
end

rule "Insert address from each Customer_165"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_165")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 165 + i));
    }
end
rule "Insert all accounts from each Customer_165"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_165")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 165 + i));
    }
end
rule "Insert sending account from each Transaction_165"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_165")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 165 + i));
    }
end
rule "Insert receiving account from each Transaction_165"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_165")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 165 + i))
    }
end
rule "Insert owner from each Credit card_165"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_165")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 165 + i));
    }
end

rule "Insert address from each Customer_164"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_164")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 164 + i));
    }
end
rule "Insert all accounts from each Customer_164"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_164")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 164 + i));
    }
end
rule "Insert sending account from each Transaction_164"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_164")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 164 + i));
    }
end
rule "Insert receiving account from each Transaction_164"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_164")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 164 + i))
    }
end
rule "Insert owner from each Credit card_164"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_164")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 164 + i));
    }
end

rule "Insert address from each Customer_163"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_163")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 163 + i));
    }
end
rule "Insert all accounts from each Customer_163"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_163")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 163 + i));
    }
end
rule "Insert sending account from each Transaction_163"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_163")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 163 + i));
    }
end
rule "Insert receiving account from each Transaction_163"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_163")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 163 + i))
    }
end
rule "Insert owner from each Credit card_163"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_163")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 163 + i));
    }
end

rule "Insert address from each Customer_162"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_162")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 162 + i));
    }
end
rule "Insert all accounts from each Customer_162"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_162")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 162 + i));
    }
end
rule "Insert sending account from each Transaction_162"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_162")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 162 + i));
    }
end
rule "Insert receiving account from each Transaction_162"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_162")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 162 + i))
    }
end
rule "Insert owner from each Credit card_162"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_162")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 162 + i));
    }
end

rule "Insert address from each Customer_161"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_161")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 161 + i));
    }
end
rule "Insert all accounts from each Customer_161"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_161")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 161 + i));
    }
end
rule "Insert sending account from each Transaction_161"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_161")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 161 + i));
    }
end
rule "Insert receiving account from each Transaction_161"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_161")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 161 + i))
    }
end
rule "Insert owner from each Credit card_161"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_161")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 161 + i));
    }
end

rule "Insert address from each Customer_160"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_160")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 160 + i));
    }
end
rule "Insert all accounts from each Customer_160"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_160")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 160 + i));
    }
end
rule "Insert sending account from each Transaction_160"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_160")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 160 + i));
    }
end
rule "Insert receiving account from each Transaction_160"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_160")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 160 + i))
    }
end
rule "Insert owner from each Credit card_160"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_160")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 160 + i));
    }
end

rule "Insert address from each Customer_159"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_159")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 159 + i));
    }
end
rule "Insert all accounts from each Customer_159"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_159")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 159 + i));
    }
end
rule "Insert sending account from each Transaction_159"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_159")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 159 + i));
    }
end
rule "Insert receiving account from each Transaction_159"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_159")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 159 + i))
    }
end
rule "Insert owner from each Credit card_159"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_159")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 159 + i));
    }
end

rule "Insert address from each Customer_158"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_158")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 158 + i));
    }
end
rule "Insert all accounts from each Customer_158"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_158")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 158 + i));
    }
end
rule "Insert sending account from each Transaction_158"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_158")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 158 + i));
    }
end
rule "Insert receiving account from each Transaction_158"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_158")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 158 + i))
    }
end
rule "Insert owner from each Credit card_158"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_158")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 158 + i));
    }
end

rule "Insert address from each Customer_157"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_157")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 157 + i));
    }
end
rule "Insert all accounts from each Customer_157"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_157")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 157 + i));
    }
end
rule "Insert sending account from each Transaction_157"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_157")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 157 + i));
    }
end
rule "Insert receiving account from each Transaction_157"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_157")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 157 + i))
    }
end
rule "Insert owner from each Credit card_157"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_157")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 157 + i));
    }
end

rule "Insert address from each Customer_156"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_156")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 156 + i));
    }
end
rule "Insert all accounts from each Customer_156"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_156")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 156 + i));
    }
end
rule "Insert sending account from each Transaction_156"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_156")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 156 + i));
    }
end
rule "Insert receiving account from each Transaction_156"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_156")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 156 + i))
    }
end
rule "Insert owner from each Credit card_156"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_156")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 156 + i));
    }
end

rule "Insert address from each Customer_155"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_155")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 155 + i));
    }
end
rule "Insert all accounts from each Customer_155"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_155")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 155 + i));
    }
end
rule "Insert sending account from each Transaction_155"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_155")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 155 + i));
    }
end
rule "Insert receiving account from each Transaction_155"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_155")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 155 + i))
    }
end
rule "Insert owner from each Credit card_155"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_155")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 155 + i));
    }
end

rule "Insert address from each Customer_154"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_154")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 154 + i));
    }
end
rule "Insert all accounts from each Customer_154"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_154")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 154 + i));
    }
end
rule "Insert sending account from each Transaction_154"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_154")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 154 + i));
    }
end
rule "Insert receiving account from each Transaction_154"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_154")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 154 + i))
    }
end
rule "Insert owner from each Credit card_154"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_154")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 154 + i));
    }
end

rule "Insert address from each Customer_153"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_153")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 153 + i));
    }
end
rule "Insert all accounts from each Customer_153"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_153")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 153 + i));
    }
end
rule "Insert sending account from each Transaction_153"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_153")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 153 + i));
    }
end
rule "Insert receiving account from each Transaction_153"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_153")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 153 + i))
    }
end
rule "Insert owner from each Credit card_153"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_153")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 153 + i));
    }
end

rule "Insert address from each Customer_152"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_152")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 152 + i));
    }
end
rule "Insert all accounts from each Customer_152"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_152")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 152 + i));
    }
end
rule "Insert sending account from each Transaction_152"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_152")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 152 + i));
    }
end
rule "Insert receiving account from each Transaction_152"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_152")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 152 + i))
    }
end
rule "Insert owner from each Credit card_152"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_152")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 152 + i));
    }
end

rule "Insert address from each Customer_151"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_151")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 151 + i));
    }
end
rule "Insert all accounts from each Customer_151"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_151")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 151 + i));
    }
end
rule "Insert sending account from each Transaction_151"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_151")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 151 + i));
    }
end
rule "Insert receiving account from each Transaction_151"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_151")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 151 + i))
    }
end
rule "Insert owner from each Credit card_151"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_151")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 151 + i));
    }
end

rule "Insert address from each Customer_150"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_150")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 150 + i));
    }
end
rule "Insert all accounts from each Customer_150"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_150")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 150 + i));
    }
end
rule "Insert sending account from each Transaction_150"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_150")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 150 + i));
    }
end
rule "Insert receiving account from each Transaction_150"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_150")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 150 + i))
    }
end
rule "Insert owner from each Credit card_150"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_150")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 150 + i));
    }
end

rule "Insert address from each Customer_149"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_149")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 149 + i));
    }
end
rule "Insert all accounts from each Customer_149"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_149")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 149 + i));
    }
end
rule "Insert sending account from each Transaction_149"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_149")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 149 + i));
    }
end
rule "Insert receiving account from each Transaction_149"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_149")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 149 + i))
    }
end
rule "Insert owner from each Credit card_149"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_149")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 149 + i));
    }
end

rule "Insert address from each Customer_148"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_148")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 148 + i));
    }
end
rule "Insert all accounts from each Customer_148"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_148")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 148 + i));
    }
end
rule "Insert sending account from each Transaction_148"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_148")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 148 + i));
    }
end
rule "Insert receiving account from each Transaction_148"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_148")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 148 + i))
    }
end
rule "Insert owner from each Credit card_148"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_148")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 148 + i));
    }
end

rule "Insert address from each Customer_147"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_147")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 147 + i));
    }
end
rule "Insert all accounts from each Customer_147"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_147")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 147 + i));
    }
end
rule "Insert sending account from each Transaction_147"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_147")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 147 + i));
    }
end
rule "Insert receiving account from each Transaction_147"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_147")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 147 + i))
    }
end
rule "Insert owner from each Credit card_147"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_147")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 147 + i));
    }
end

rule "Insert address from each Customer_146"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_146")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 146 + i));
    }
end
rule "Insert all accounts from each Customer_146"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_146")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 146 + i));
    }
end
rule "Insert sending account from each Transaction_146"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_146")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 146 + i));
    }
end
rule "Insert receiving account from each Transaction_146"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_146")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 146 + i))
    }
end
rule "Insert owner from each Credit card_146"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_146")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 146 + i));
    }
end

rule "Insert address from each Customer_145"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_145")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 145 + i));
    }
end
rule "Insert all accounts from each Customer_145"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_145")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 145 + i));
    }
end
rule "Insert sending account from each Transaction_145"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_145")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 145 + i));
    }
end
rule "Insert receiving account from each Transaction_145"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_145")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 145 + i))
    }
end
rule "Insert owner from each Credit card_145"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_145")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 145 + i));
    }
end

rule "Insert address from each Customer_144"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_144")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 144 + i));
    }
end
rule "Insert all accounts from each Customer_144"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_144")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 144 + i));
    }
end
rule "Insert sending account from each Transaction_144"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_144")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 144 + i));
    }
end
rule "Insert receiving account from each Transaction_144"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_144")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 144 + i))
    }
end
rule "Insert owner from each Credit card_144"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_144")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 144 + i));
    }
end

rule "Insert address from each Customer_143"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_143")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 143 + i));
    }
end
rule "Insert all accounts from each Customer_143"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_143")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 143 + i));
    }
end
rule "Insert sending account from each Transaction_143"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_143")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 143 + i));
    }
end
rule "Insert receiving account from each Transaction_143"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_143")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 143 + i))
    }
end
rule "Insert owner from each Credit card_143"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_143")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 143 + i));
    }
end

rule "Insert address from each Customer_142"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_142")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 142 + i));
    }
end
rule "Insert all accounts from each Customer_142"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_142")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 142 + i));
    }
end
rule "Insert sending account from each Transaction_142"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_142")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 142 + i));
    }
end
rule "Insert receiving account from each Transaction_142"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_142")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 142 + i))
    }
end
rule "Insert owner from each Credit card_142"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_142")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 142 + i));
    }
end

rule "Insert address from each Customer_141"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_141")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 141 + i));
    }
end
rule "Insert all accounts from each Customer_141"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_141")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 141 + i));
    }
end
rule "Insert sending account from each Transaction_141"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_141")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 141 + i));
    }
end
rule "Insert receiving account from each Transaction_141"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_141")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 141 + i))
    }
end
rule "Insert owner from each Credit card_141"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_141")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 141 + i));
    }
end

rule "Insert address from each Customer_140"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_140")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 140 + i));
    }
end
rule "Insert all accounts from each Customer_140"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_140")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 140 + i));
    }
end
rule "Insert sending account from each Transaction_140"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_140")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 140 + i));
    }
end
rule "Insert receiving account from each Transaction_140"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_140")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 140 + i))
    }
end
rule "Insert owner from each Credit card_140"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_140")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 140 + i));
    }
end

rule "Insert address from each Customer_139"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_139")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 139 + i));
    }
end
rule "Insert all accounts from each Customer_139"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_139")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 139 + i));
    }
end
rule "Insert sending account from each Transaction_139"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_139")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 139 + i));
    }
end
rule "Insert receiving account from each Transaction_139"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_139")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 139 + i))
    }
end
rule "Insert owner from each Credit card_139"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_139")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 139 + i));
    }
end

rule "Insert address from each Customer_138"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_138")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 138 + i));
    }
end
rule "Insert all accounts from each Customer_138"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_138")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 138 + i));
    }
end
rule "Insert sending account from each Transaction_138"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_138")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 138 + i));
    }
end
rule "Insert receiving account from each Transaction_138"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_138")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 138 + i))
    }
end
rule "Insert owner from each Credit card_138"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_138")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 138 + i));
    }
end

rule "Insert address from each Customer_137"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_137")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 137 + i));
    }
end
rule "Insert all accounts from each Customer_137"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_137")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 137 + i));
    }
end
rule "Insert sending account from each Transaction_137"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_137")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 137 + i));
    }
end
rule "Insert receiving account from each Transaction_137"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_137")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 137 + i))
    }
end
rule "Insert owner from each Credit card_137"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_137")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 137 + i));
    }
end

rule "Insert address from each Customer_136"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_136")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 136 + i));
    }
end
rule "Insert all accounts from each Customer_136"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_136")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 136 + i));
    }
end
rule "Insert sending account from each Transaction_136"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_136")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 136 + i));
    }
end
rule "Insert receiving account from each Transaction_136"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_136")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 136 + i))
    }
end
rule "Insert owner from each Credit card_136"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_136")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 136 + i));
    }
end

rule "Insert address from each Customer_135"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_135")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 135 + i));
    }
end
rule "Insert all accounts from each Customer_135"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_135")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 135 + i));
    }
end
rule "Insert sending account from each Transaction_135"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_135")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 135 + i));
    }
end
rule "Insert receiving account from each Transaction_135"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_135")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 135 + i))
    }
end
rule "Insert owner from each Credit card_135"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_135")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 135 + i));
    }
end

rule "Insert address from each Customer_134"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_134")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 134 + i));
    }
end
rule "Insert all accounts from each Customer_134"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_134")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 134 + i));
    }
end
rule "Insert sending account from each Transaction_134"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_134")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 134 + i));
    }
end
rule "Insert receiving account from each Transaction_134"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_134")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 134 + i))
    }
end
rule "Insert owner from each Credit card_134"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_134")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 134 + i));
    }
end

rule "Insert address from each Customer_133"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_133")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 133 + i));
    }
end
rule "Insert all accounts from each Customer_133"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_133")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 133 + i));
    }
end
rule "Insert sending account from each Transaction_133"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_133")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 133 + i));
    }
end
rule "Insert receiving account from each Transaction_133"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_133")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 133 + i))
    }
end
rule "Insert owner from each Credit card_133"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_133")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 133 + i));
    }
end

rule "Insert address from each Customer_132"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_132")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 132 + i));
    }
end
rule "Insert all accounts from each Customer_132"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_132")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 132 + i));
    }
end
rule "Insert sending account from each Transaction_132"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_132")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 132 + i));
    }
end
rule "Insert receiving account from each Transaction_132"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_132")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 132 + i))
    }
end
rule "Insert owner from each Credit card_132"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_132")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 132 + i));
    }
end

rule "Insert address from each Customer_131"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_131")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 131 + i));
    }
end
rule "Insert all accounts from each Customer_131"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_131")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 131 + i));
    }
end
rule "Insert sending account from each Transaction_131"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_131")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 131 + i));
    }
end
rule "Insert receiving account from each Transaction_131"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_131")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 131 + i))
    }
end
rule "Insert owner from each Credit card_131"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_131")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 131 + i));
    }
end

rule "Insert address from each Customer_130"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_130")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 130 + i));
    }
end
rule "Insert all accounts from each Customer_130"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_130")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 130 + i));
    }
end
rule "Insert sending account from each Transaction_130"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_130")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 130 + i));
    }
end
rule "Insert receiving account from each Transaction_130"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_130")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 130 + i))
    }
end
rule "Insert owner from each Credit card_130"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_130")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 130 + i));
    }
end

rule "Insert address from each Customer_129"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_129")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 129 + i));
    }
end
rule "Insert all accounts from each Customer_129"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_129")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 129 + i));
    }
end
rule "Insert sending account from each Transaction_129"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_129")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 129 + i));
    }
end
rule "Insert receiving account from each Transaction_129"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_129")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 129 + i))
    }
end
rule "Insert owner from each Credit card_129"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_129")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 129 + i));
    }
end

rule "Insert address from each Customer_128"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_128")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 128 + i));
    }
end
rule "Insert all accounts from each Customer_128"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_128")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 128 + i));
    }
end
rule "Insert sending account from each Transaction_128"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_128")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 128 + i));
    }
end
rule "Insert receiving account from each Transaction_128"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_128")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 128 + i))
    }
end
rule "Insert owner from each Credit card_128"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_128")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 128 + i));
    }
end

rule "Insert address from each Customer_127"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_127")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 127 + i));
    }
end
rule "Insert all accounts from each Customer_127"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_127")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 127 + i));
    }
end
rule "Insert sending account from each Transaction_127"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_127")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 127 + i));
    }
end
rule "Insert receiving account from each Transaction_127"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_127")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 127 + i))
    }
end
rule "Insert owner from each Credit card_127"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_127")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 127 + i));
    }
end

rule "Insert address from each Customer_126"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_126")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 126 + i));
    }
end
rule "Insert all accounts from each Customer_126"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_126")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 126 + i));
    }
end
rule "Insert sending account from each Transaction_126"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_126")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 126 + i));
    }
end
rule "Insert receiving account from each Transaction_126"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_126")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 126 + i))
    }
end
rule "Insert owner from each Credit card_126"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_126")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 126 + i));
    }
end

rule "Insert address from each Customer_125"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_125")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 125 + i));
    }
end
rule "Insert all accounts from each Customer_125"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_125")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 125 + i));
    }
end
rule "Insert sending account from each Transaction_125"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_125")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 125 + i));
    }
end
rule "Insert receiving account from each Transaction_125"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_125")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 125 + i))
    }
end
rule "Insert owner from each Credit card_125"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_125")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 125 + i));
    }
end

rule "Insert address from each Customer_124"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_124")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 124 + i));
    }
end
rule "Insert all accounts from each Customer_124"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_124")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 124 + i));
    }
end
rule "Insert sending account from each Transaction_124"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_124")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 124 + i));
    }
end
rule "Insert receiving account from each Transaction_124"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_124")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 124 + i))
    }
end
rule "Insert owner from each Credit card_124"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_124")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 124 + i));
    }
end

rule "Insert address from each Customer_123"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_123")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 123 + i));
    }
end
rule "Insert all accounts from each Customer_123"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_123")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 123 + i));
    }
end
rule "Insert sending account from each Transaction_123"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_123")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 123 + i));
    }
end
rule "Insert receiving account from each Transaction_123"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_123")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 123 + i))
    }
end
rule "Insert owner from each Credit card_123"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_123")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 123 + i));
    }
end

rule "Insert address from each Customer_122"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_122")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 122 + i));
    }
end
rule "Insert all accounts from each Customer_122"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_122")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 122 + i));
    }
end
rule "Insert sending account from each Transaction_122"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_122")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 122 + i));
    }
end
rule "Insert receiving account from each Transaction_122"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_122")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 122 + i))
    }
end
rule "Insert owner from each Credit card_122"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_122")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 122 + i));
    }
end

rule "Insert address from each Customer_121"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_121")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 121 + i));
    }
end
rule "Insert all accounts from each Customer_121"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_121")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 121 + i));
    }
end
rule "Insert sending account from each Transaction_121"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_121")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 121 + i));
    }
end
rule "Insert receiving account from each Transaction_121"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_121")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 121 + i))
    }
end
rule "Insert owner from each Credit card_121"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_121")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 121 + i));
    }
end

rule "Insert address from each Customer_120"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_120")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 120 + i));
    }
end
rule "Insert all accounts from each Customer_120"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_120")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 120 + i));
    }
end
rule "Insert sending account from each Transaction_120"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_120")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 120 + i));
    }
end
rule "Insert receiving account from each Transaction_120"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_120")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 120 + i))
    }
end
rule "Insert owner from each Credit card_120"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_120")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 120 + i));
    }
end

rule "Insert address from each Customer_119"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_119")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 119 + i));
    }
end
rule "Insert all accounts from each Customer_119"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_119")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 119 + i));
    }
end
rule "Insert sending account from each Transaction_119"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_119")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 119 + i));
    }
end
rule "Insert receiving account from each Transaction_119"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_119")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 119 + i))
    }
end
rule "Insert owner from each Credit card_119"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_119")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 119 + i));
    }
end

rule "Insert address from each Customer_118"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_118")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 118 + i));
    }
end
rule "Insert all accounts from each Customer_118"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_118")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 118 + i));
    }
end
rule "Insert sending account from each Transaction_118"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_118")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 118 + i));
    }
end
rule "Insert receiving account from each Transaction_118"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_118")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 118 + i))
    }
end
rule "Insert owner from each Credit card_118"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_118")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 118 + i));
    }
end

rule "Insert address from each Customer_117"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_117")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 117 + i));
    }
end
rule "Insert all accounts from each Customer_117"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_117")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 117 + i));
    }
end
rule "Insert sending account from each Transaction_117"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_117")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 117 + i));
    }
end
rule "Insert receiving account from each Transaction_117"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_117")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 117 + i))
    }
end
rule "Insert owner from each Credit card_117"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_117")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 117 + i));
    }
end

rule "Insert address from each Customer_116"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_116")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 116 + i));
    }
end
rule "Insert all accounts from each Customer_116"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_116")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 116 + i));
    }
end
rule "Insert sending account from each Transaction_116"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_116")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 116 + i));
    }
end
rule "Insert receiving account from each Transaction_116"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_116")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 116 + i))
    }
end
rule "Insert owner from each Credit card_116"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_116")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 116 + i));
    }
end

rule "Insert address from each Customer_115"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_115")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 115 + i));
    }
end
rule "Insert all accounts from each Customer_115"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_115")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 115 + i));
    }
end
rule "Insert sending account from each Transaction_115"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_115")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 115 + i));
    }
end
rule "Insert receiving account from each Transaction_115"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_115")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 115 + i))
    }
end
rule "Insert owner from each Credit card_115"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_115")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 115 + i));
    }
end

rule "Insert address from each Customer_114"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_114")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 114 + i));
    }
end
rule "Insert all accounts from each Customer_114"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_114")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 114 + i));
    }
end
rule "Insert sending account from each Transaction_114"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_114")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 114 + i));
    }
end
rule "Insert receiving account from each Transaction_114"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_114")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 114 + i))
    }
end
rule "Insert owner from each Credit card_114"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_114")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 114 + i));
    }
end

rule "Insert address from each Customer_113"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_113")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 113 + i));
    }
end
rule "Insert all accounts from each Customer_113"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_113")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 113 + i));
    }
end
rule "Insert sending account from each Transaction_113"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_113")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 113 + i));
    }
end
rule "Insert receiving account from each Transaction_113"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_113")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 113 + i))
    }
end
rule "Insert owner from each Credit card_113"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_113")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 113 + i));
    }
end

rule "Insert address from each Customer_112"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_112")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 112 + i));
    }
end
rule "Insert all accounts from each Customer_112"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_112")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 112 + i));
    }
end
rule "Insert sending account from each Transaction_112"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_112")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 112 + i));
    }
end
rule "Insert receiving account from each Transaction_112"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_112")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 112 + i))
    }
end
rule "Insert owner from each Credit card_112"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_112")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 112 + i));
    }
end

rule "Insert address from each Customer_111"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_111")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 111 + i));
    }
end
rule "Insert all accounts from each Customer_111"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_111")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 111 + i));
    }
end
rule "Insert sending account from each Transaction_111"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_111")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 111 + i));
    }
end
rule "Insert receiving account from each Transaction_111"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_111")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 111 + i))
    }
end
rule "Insert owner from each Credit card_111"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_111")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 111 + i));
    }
end

rule "Insert address from each Customer_110"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_110")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 110 + i));
    }
end
rule "Insert all accounts from each Customer_110"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_110")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 110 + i));
    }
end
rule "Insert sending account from each Transaction_110"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_110")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 110 + i));
    }
end
rule "Insert receiving account from each Transaction_110"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_110")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 110 + i))
    }
end
rule "Insert owner from each Credit card_110"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_110")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 110 + i));
    }
end

rule "Insert address from each Customer_109"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_109")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 109 + i));
    }
end
rule "Insert all accounts from each Customer_109"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_109")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 109 + i));
    }
end
rule "Insert sending account from each Transaction_109"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_109")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 109 + i));
    }
end
rule "Insert receiving account from each Transaction_109"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_109")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 109 + i))
    }
end
rule "Insert owner from each Credit card_109"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_109")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 109 + i));
    }
end

rule "Insert address from each Customer_108"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_108")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 108 + i));
    }
end
rule "Insert all accounts from each Customer_108"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_108")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 108 + i));
    }
end
rule "Insert sending account from each Transaction_108"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_108")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 108 + i));
    }
end
rule "Insert receiving account from each Transaction_108"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_108")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 108 + i))
    }
end
rule "Insert owner from each Credit card_108"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_108")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 108 + i));
    }
end

rule "Insert address from each Customer_107"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_107")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 107 + i));
    }
end
rule "Insert all accounts from each Customer_107"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_107")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 107 + i));
    }
end
rule "Insert sending account from each Transaction_107"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_107")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 107 + i));
    }
end
rule "Insert receiving account from each Transaction_107"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_107")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 107 + i))
    }
end
rule "Insert owner from each Credit card_107"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_107")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 107 + i));
    }
end

rule "Insert address from each Customer_106"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_106")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 106 + i));
    }
end
rule "Insert all accounts from each Customer_106"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_106")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 106 + i));
    }
end
rule "Insert sending account from each Transaction_106"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_106")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 106 + i));
    }
end
rule "Insert receiving account from each Transaction_106"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_106")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 106 + i))
    }
end
rule "Insert owner from each Credit card_106"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_106")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 106 + i));
    }
end

rule "Insert address from each Customer_105"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_105")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 105 + i));
    }
end
rule "Insert all accounts from each Customer_105"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_105")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 105 + i));
    }
end
rule "Insert sending account from each Transaction_105"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_105")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 105 + i));
    }
end
rule "Insert receiving account from each Transaction_105"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_105")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 105 + i))
    }
end
rule "Insert owner from each Credit card_105"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_105")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 105 + i));
    }
end

rule "Insert address from each Customer_104"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_104")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 104 + i));
    }
end
rule "Insert all accounts from each Customer_104"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_104")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 104 + i));
    }
end
rule "Insert sending account from each Transaction_104"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_104")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 104 + i));
    }
end
rule "Insert receiving account from each Transaction_104"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_104")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 104 + i))
    }
end
rule "Insert owner from each Credit card_104"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_104")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 104 + i));
    }
end

rule "Insert address from each Customer_103"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_103")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 103 + i));
    }
end
rule "Insert all accounts from each Customer_103"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_103")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 103 + i));
    }
end
rule "Insert sending account from each Transaction_103"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_103")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 103 + i));
    }
end
rule "Insert receiving account from each Transaction_103"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_103")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 103 + i))
    }
end
rule "Insert owner from each Credit card_103"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_103")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 103 + i));
    }
end

rule "Insert address from each Customer_102"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_102")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 102 + i));
    }
end
rule "Insert all accounts from each Customer_102"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_102")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 102 + i));
    }
end
rule "Insert sending account from each Transaction_102"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_102")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 102 + i));
    }
end
rule "Insert receiving account from each Transaction_102"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_102")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 102 + i))
    }
end
rule "Insert owner from each Credit card_102"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_102")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 102 + i));
    }
end

rule "Insert address from each Customer_101"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_101")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 101 + i));
    }
end
rule "Insert all accounts from each Customer_101"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_101")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 101 + i));
    }
end
rule "Insert sending account from each Transaction_101"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_101")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 101 + i));
    }
end
rule "Insert receiving account from each Transaction_101"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_101")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 101 + i))
    }
end
rule "Insert owner from each Credit card_101"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_101")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 101 + i));
    }
end

rule "Insert address from each Customer_100"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_100")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 100 + i));
    }
end
rule "Insert all accounts from each Customer_100"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_100")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 100 + i));
    }
end
rule "Insert sending account from each Transaction_100"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_100")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 100 + i));
    }
end
rule "Insert receiving account from each Transaction_100"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_100")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 100 + i))
    }
end
rule "Insert owner from each Credit card_100"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_100")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 100 + i));
    }
end

rule "Insert address from each Customer_99"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_99")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 99 + i));
    }
end
rule "Insert all accounts from each Customer_99"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_99")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 99 + i));
    }
end
rule "Insert sending account from each Transaction_99"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_99")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 99 + i));
    }
end
rule "Insert receiving account from each Transaction_99"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_99")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 99 + i))
    }
end
rule "Insert owner from each Credit card_99"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_99")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 99 + i));
    }
end

rule "Insert address from each Customer_98"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_98")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 98 + i));
    }
end
rule "Insert all accounts from each Customer_98"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_98")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 98 + i));
    }
end
rule "Insert sending account from each Transaction_98"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_98")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 98 + i));
    }
end
rule "Insert receiving account from each Transaction_98"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_98")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 98 + i))
    }
end
rule "Insert owner from each Credit card_98"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_98")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 98 + i));
    }
end

rule "Insert address from each Customer_97"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_97")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 97 + i));
    }
end
rule "Insert all accounts from each Customer_97"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_97")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 97 + i));
    }
end
rule "Insert sending account from each Transaction_97"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_97")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 97 + i));
    }
end
rule "Insert receiving account from each Transaction_97"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_97")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 97 + i))
    }
end
rule "Insert owner from each Credit card_97"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_97")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 97 + i));
    }
end

rule "Insert address from each Customer_96"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_96")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 96 + i));
    }
end
rule "Insert all accounts from each Customer_96"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_96")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 96 + i));
    }
end
rule "Insert sending account from each Transaction_96"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_96")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 96 + i));
    }
end
rule "Insert receiving account from each Transaction_96"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_96")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 96 + i))
    }
end
rule "Insert owner from each Credit card_96"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_96")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 96 + i));
    }
end

rule "Insert address from each Customer_95"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_95")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 95 + i));
    }
end
rule "Insert all accounts from each Customer_95"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_95")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 95 + i));
    }
end
rule "Insert sending account from each Transaction_95"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_95")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 95 + i));
    }
end
rule "Insert receiving account from each Transaction_95"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_95")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 95 + i))
    }
end
rule "Insert owner from each Credit card_95"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_95")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 95 + i));
    }
end

rule "Insert address from each Customer_94"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_94")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 94 + i));
    }
end
rule "Insert all accounts from each Customer_94"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_94")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 94 + i));
    }
end
rule "Insert sending account from each Transaction_94"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_94")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 94 + i));
    }
end
rule "Insert receiving account from each Transaction_94"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_94")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 94 + i))
    }
end
rule "Insert owner from each Credit card_94"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_94")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 94 + i));
    }
end

rule "Insert address from each Customer_93"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_93")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 93 + i));
    }
end
rule "Insert all accounts from each Customer_93"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_93")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 93 + i));
    }
end
rule "Insert sending account from each Transaction_93"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_93")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 93 + i));
    }
end
rule "Insert receiving account from each Transaction_93"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_93")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 93 + i))
    }
end
rule "Insert owner from each Credit card_93"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_93")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 93 + i));
    }
end

rule "Insert address from each Customer_92"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_92")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 92 + i));
    }
end
rule "Insert all accounts from each Customer_92"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_92")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 92 + i));
    }
end
rule "Insert sending account from each Transaction_92"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_92")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 92 + i));
    }
end
rule "Insert receiving account from each Transaction_92"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_92")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 92 + i))
    }
end
rule "Insert owner from each Credit card_92"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_92")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 92 + i));
    }
end

rule "Insert address from each Customer_91"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_91")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 91 + i));
    }
end
rule "Insert all accounts from each Customer_91"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_91")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 91 + i));
    }
end
rule "Insert sending account from each Transaction_91"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_91")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 91 + i));
    }
end
rule "Insert receiving account from each Transaction_91"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_91")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 91 + i))
    }
end
rule "Insert owner from each Credit card_91"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_91")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 91 + i));
    }
end

rule "Insert address from each Customer_90"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_90")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 90 + i));
    }
end
rule "Insert all accounts from each Customer_90"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_90")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 90 + i));
    }
end
rule "Insert sending account from each Transaction_90"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_90")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 90 + i));
    }
end
rule "Insert receiving account from each Transaction_90"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_90")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 90 + i))
    }
end
rule "Insert owner from each Credit card_90"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_90")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 90 + i));
    }
end

rule "Insert address from each Customer_89"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_89")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 89 + i));
    }
end
rule "Insert all accounts from each Customer_89"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_89")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 89 + i));
    }
end
rule "Insert sending account from each Transaction_89"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_89")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 89 + i));
    }
end
rule "Insert receiving account from each Transaction_89"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_89")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 89 + i))
    }
end
rule "Insert owner from each Credit card_89"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_89")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 89 + i));
    }
end

rule "Insert address from each Customer_88"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_88")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 88 + i));
    }
end
rule "Insert all accounts from each Customer_88"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_88")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 88 + i));
    }
end
rule "Insert sending account from each Transaction_88"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_88")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 88 + i));
    }
end
rule "Insert receiving account from each Transaction_88"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_88")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 88 + i))
    }
end
rule "Insert owner from each Credit card_88"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_88")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 88 + i));
    }
end

rule "Insert address from each Customer_87"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_87")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 87 + i));
    }
end
rule "Insert all accounts from each Customer_87"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_87")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 87 + i));
    }
end
rule "Insert sending account from each Transaction_87"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_87")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 87 + i));
    }
end
rule "Insert receiving account from each Transaction_87"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_87")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 87 + i))
    }
end
rule "Insert owner from each Credit card_87"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_87")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 87 + i));
    }
end

rule "Insert address from each Customer_86"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_86")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 86 + i));
    }
end
rule "Insert all accounts from each Customer_86"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_86")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 86 + i));
    }
end
rule "Insert sending account from each Transaction_86"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_86")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 86 + i));
    }
end
rule "Insert receiving account from each Transaction_86"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_86")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 86 + i))
    }
end
rule "Insert owner from each Credit card_86"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_86")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 86 + i));
    }
end

rule "Insert address from each Customer_85"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_85")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 85 + i));
    }
end
rule "Insert all accounts from each Customer_85"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_85")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 85 + i));
    }
end
rule "Insert sending account from each Transaction_85"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_85")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 85 + i));
    }
end
rule "Insert receiving account from each Transaction_85"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_85")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 85 + i))
    }
end
rule "Insert owner from each Credit card_85"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_85")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 85 + i));
    }
end

rule "Insert address from each Customer_84"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_84")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 84 + i));
    }
end
rule "Insert all accounts from each Customer_84"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_84")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 84 + i));
    }
end
rule "Insert sending account from each Transaction_84"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_84")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 84 + i));
    }
end
rule "Insert receiving account from each Transaction_84"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_84")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 84 + i))
    }
end
rule "Insert owner from each Credit card_84"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_84")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 84 + i));
    }
end

rule "Insert address from each Customer_83"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_83")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 83 + i));
    }
end
rule "Insert all accounts from each Customer_83"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_83")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 83 + i));
    }
end
rule "Insert sending account from each Transaction_83"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_83")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 83 + i));
    }
end
rule "Insert receiving account from each Transaction_83"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_83")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 83 + i))
    }
end
rule "Insert owner from each Credit card_83"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_83")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 83 + i));
    }
end

rule "Insert address from each Customer_82"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_82")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 82 + i));
    }
end
rule "Insert all accounts from each Customer_82"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_82")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 82 + i));
    }
end
rule "Insert sending account from each Transaction_82"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_82")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 82 + i));
    }
end
rule "Insert receiving account from each Transaction_82"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_82")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 82 + i))
    }
end
rule "Insert owner from each Credit card_82"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_82")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 82 + i));
    }
end

rule "Insert address from each Customer_81"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_81")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 81 + i));
    }
end
rule "Insert all accounts from each Customer_81"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_81")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 81 + i));
    }
end
rule "Insert sending account from each Transaction_81"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_81")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 81 + i));
    }
end
rule "Insert receiving account from each Transaction_81"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_81")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 81 + i))
    }
end
rule "Insert owner from each Credit card_81"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_81")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 81 + i));
    }
end

rule "Insert address from each Customer_80"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_80")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 80 + i));
    }
end
rule "Insert all accounts from each Customer_80"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_80")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 80 + i));
    }
end
rule "Insert sending account from each Transaction_80"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_80")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 80 + i));
    }
end
rule "Insert receiving account from each Transaction_80"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_80")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 80 + i))
    }
end
rule "Insert owner from each Credit card_80"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_80")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 80 + i));
    }
end

rule "Insert address from each Customer_79"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_79")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 79 + i));
    }
end
rule "Insert all accounts from each Customer_79"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_79")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 79 + i));
    }
end
rule "Insert sending account from each Transaction_79"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_79")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 79 + i));
    }
end
rule "Insert receiving account from each Transaction_79"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_79")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 79 + i))
    }
end
rule "Insert owner from each Credit card_79"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_79")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 79 + i));
    }
end

rule "Insert address from each Customer_78"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_78")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 78 + i));
    }
end
rule "Insert all accounts from each Customer_78"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_78")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 78 + i));
    }
end
rule "Insert sending account from each Transaction_78"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_78")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 78 + i));
    }
end
rule "Insert receiving account from each Transaction_78"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_78")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 78 + i))
    }
end
rule "Insert owner from each Credit card_78"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_78")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 78 + i));
    }
end

rule "Insert address from each Customer_77"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_77")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 77 + i));
    }
end
rule "Insert all accounts from each Customer_77"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_77")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 77 + i));
    }
end
rule "Insert sending account from each Transaction_77"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_77")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 77 + i));
    }
end
rule "Insert receiving account from each Transaction_77"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_77")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 77 + i))
    }
end
rule "Insert owner from each Credit card_77"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_77")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 77 + i));
    }
end

rule "Insert address from each Customer_76"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_76")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 76 + i));
    }
end
rule "Insert all accounts from each Customer_76"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_76")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 76 + i));
    }
end
rule "Insert sending account from each Transaction_76"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_76")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 76 + i));
    }
end
rule "Insert receiving account from each Transaction_76"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_76")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 76 + i))
    }
end
rule "Insert owner from each Credit card_76"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_76")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 76 + i));
    }
end

rule "Insert address from each Customer_75"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_75")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 75 + i));
    }
end
rule "Insert all accounts from each Customer_75"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_75")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 75 + i));
    }
end
rule "Insert sending account from each Transaction_75"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_75")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 75 + i));
    }
end
rule "Insert receiving account from each Transaction_75"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_75")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 75 + i))
    }
end
rule "Insert owner from each Credit card_75"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_75")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 75 + i));
    }
end

rule "Insert address from each Customer_74"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_74")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 74 + i));
    }
end
rule "Insert all accounts from each Customer_74"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_74")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 74 + i));
    }
end
rule "Insert sending account from each Transaction_74"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_74")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 74 + i));
    }
end
rule "Insert receiving account from each Transaction_74"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_74")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 74 + i))
    }
end
rule "Insert owner from each Credit card_74"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_74")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 74 + i));
    }
end

rule "Insert address from each Customer_73"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_73")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 73 + i));
    }
end
rule "Insert all accounts from each Customer_73"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_73")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 73 + i));
    }
end
rule "Insert sending account from each Transaction_73"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_73")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 73 + i));
    }
end
rule "Insert receiving account from each Transaction_73"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_73")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 73 + i))
    }
end
rule "Insert owner from each Credit card_73"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_73")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 73 + i));
    }
end

rule "Insert address from each Customer_72"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_72")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 72 + i));
    }
end
rule "Insert all accounts from each Customer_72"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_72")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 72 + i));
    }
end
rule "Insert sending account from each Transaction_72"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_72")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 72 + i));
    }
end
rule "Insert receiving account from each Transaction_72"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_72")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 72 + i))
    }
end
rule "Insert owner from each Credit card_72"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_72")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 72 + i));
    }
end

rule "Insert address from each Customer_71"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_71")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 71 + i));
    }
end
rule "Insert all accounts from each Customer_71"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_71")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 71 + i));
    }
end
rule "Insert sending account from each Transaction_71"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_71")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 71 + i));
    }
end
rule "Insert receiving account from each Transaction_71"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_71")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 71 + i))
    }
end
rule "Insert owner from each Credit card_71"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_71")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 71 + i));
    }
end

rule "Insert address from each Customer_70"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_70")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 70 + i));
    }
end
rule "Insert all accounts from each Customer_70"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_70")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 70 + i));
    }
end
rule "Insert sending account from each Transaction_70"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_70")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 70 + i));
    }
end
rule "Insert receiving account from each Transaction_70"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_70")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 70 + i))
    }
end
rule "Insert owner from each Credit card_70"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_70")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 70 + i));
    }
end

rule "Insert address from each Customer_69"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_69")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 69 + i));
    }
end
rule "Insert all accounts from each Customer_69"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_69")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 69 + i));
    }
end
rule "Insert sending account from each Transaction_69"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_69")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 69 + i));
    }
end
rule "Insert receiving account from each Transaction_69"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_69")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 69 + i))
    }
end
rule "Insert owner from each Credit card_69"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_69")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 69 + i));
    }
end

rule "Insert address from each Customer_68"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_68")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 68 + i));
    }
end
rule "Insert all accounts from each Customer_68"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_68")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 68 + i));
    }
end
rule "Insert sending account from each Transaction_68"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_68")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 68 + i));
    }
end
rule "Insert receiving account from each Transaction_68"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_68")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 68 + i))
    }
end
rule "Insert owner from each Credit card_68"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_68")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 68 + i));
    }
end

rule "Insert address from each Customer_67"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_67")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 67 + i));
    }
end
rule "Insert all accounts from each Customer_67"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_67")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 67 + i));
    }
end
rule "Insert sending account from each Transaction_67"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_67")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 67 + i));
    }
end
rule "Insert receiving account from each Transaction_67"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_67")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 67 + i))
    }
end
rule "Insert owner from each Credit card_67"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_67")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 67 + i));
    }
end

rule "Insert address from each Customer_66"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_66")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 66 + i));
    }
end
rule "Insert all accounts from each Customer_66"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_66")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 66 + i));
    }
end
rule "Insert sending account from each Transaction_66"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_66")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 66 + i));
    }
end
rule "Insert receiving account from each Transaction_66"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_66")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 66 + i))
    }
end
rule "Insert owner from each Credit card_66"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_66")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 66 + i));
    }
end

rule "Insert address from each Customer_65"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_65")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 65 + i));
    }
end
rule "Insert all accounts from each Customer_65"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_65")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 65 + i));
    }
end
rule "Insert sending account from each Transaction_65"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_65")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 65 + i));
    }
end
rule "Insert receiving account from each Transaction_65"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_65")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 65 + i))
    }
end
rule "Insert owner from each Credit card_65"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_65")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 65 + i));
    }
end

rule "Insert address from each Customer_64"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_64")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 64 + i));
    }
end
rule "Insert all accounts from each Customer_64"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_64")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 64 + i));
    }
end
rule "Insert sending account from each Transaction_64"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_64")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 64 + i));
    }
end
rule "Insert receiving account from each Transaction_64"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_64")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 64 + i))
    }
end
rule "Insert owner from each Credit card_64"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_64")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 64 + i));
    }
end

rule "Insert address from each Customer_63"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_63")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 63 + i));
    }
end
rule "Insert all accounts from each Customer_63"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_63")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 63 + i));
    }
end
rule "Insert sending account from each Transaction_63"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_63")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 63 + i));
    }
end
rule "Insert receiving account from each Transaction_63"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_63")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 63 + i))
    }
end
rule "Insert owner from each Credit card_63"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_63")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 63 + i));
    }
end

rule "Insert address from each Customer_62"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_62")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 62 + i));
    }
end
rule "Insert all accounts from each Customer_62"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_62")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 62 + i));
    }
end
rule "Insert sending account from each Transaction_62"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_62")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 62 + i));
    }
end
rule "Insert receiving account from each Transaction_62"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_62")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 62 + i))
    }
end
rule "Insert owner from each Credit card_62"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_62")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 62 + i));
    }
end

rule "Insert address from each Customer_61"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_61")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 61 + i));
    }
end
rule "Insert all accounts from each Customer_61"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_61")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 61 + i));
    }
end
rule "Insert sending account from each Transaction_61"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_61")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 61 + i));
    }
end
rule "Insert receiving account from each Transaction_61"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_61")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 61 + i))
    }
end
rule "Insert owner from each Credit card_61"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_61")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 61 + i));
    }
end

rule "Insert address from each Customer_60"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_60")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 60 + i));
    }
end
rule "Insert all accounts from each Customer_60"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_60")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 60 + i));
    }
end
rule "Insert sending account from each Transaction_60"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_60")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 60 + i));
    }
end
rule "Insert receiving account from each Transaction_60"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_60")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 60 + i))
    }
end
rule "Insert owner from each Credit card_60"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_60")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 60 + i));
    }
end

rule "Insert address from each Customer_59"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_59")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 59 + i));
    }
end
rule "Insert all accounts from each Customer_59"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_59")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 59 + i));
    }
end
rule "Insert sending account from each Transaction_59"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_59")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 59 + i));
    }
end
rule "Insert receiving account from each Transaction_59"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_59")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 59 + i))
    }
end
rule "Insert owner from each Credit card_59"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_59")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 59 + i));
    }
end

rule "Insert address from each Customer_58"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_58")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 58 + i));
    }
end
rule "Insert all accounts from each Customer_58"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_58")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 58 + i));
    }
end
rule "Insert sending account from each Transaction_58"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_58")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 58 + i));
    }
end
rule "Insert receiving account from each Transaction_58"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_58")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 58 + i))
    }
end
rule "Insert owner from each Credit card_58"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_58")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 58 + i));
    }
end

rule "Insert address from each Customer_57"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_57")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 57 + i));
    }
end
rule "Insert all accounts from each Customer_57"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_57")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 57 + i));
    }
end
rule "Insert sending account from each Transaction_57"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_57")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 57 + i));
    }
end
rule "Insert receiving account from each Transaction_57"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_57")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 57 + i))
    }
end
rule "Insert owner from each Credit card_57"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_57")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 57 + i));
    }
end

rule "Insert address from each Customer_56"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_56")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 56 + i));
    }
end
rule "Insert all accounts from each Customer_56"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_56")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 56 + i));
    }
end
rule "Insert sending account from each Transaction_56"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_56")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 56 + i));
    }
end
rule "Insert receiving account from each Transaction_56"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_56")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 56 + i))
    }
end
rule "Insert owner from each Credit card_56"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_56")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 56 + i));
    }
end

rule "Insert address from each Customer_55"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_55")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 55 + i));
    }
end
rule "Insert all accounts from each Customer_55"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_55")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 55 + i));
    }
end
rule "Insert sending account from each Transaction_55"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_55")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 55 + i));
    }
end
rule "Insert receiving account from each Transaction_55"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_55")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 55 + i))
    }
end
rule "Insert owner from each Credit card_55"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_55")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 55 + i));
    }
end

rule "Insert address from each Customer_54"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_54")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 54 + i));
    }
end
rule "Insert all accounts from each Customer_54"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_54")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 54 + i));
    }
end
rule "Insert sending account from each Transaction_54"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_54")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 54 + i));
    }
end
rule "Insert receiving account from each Transaction_54"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_54")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 54 + i))
    }
end
rule "Insert owner from each Credit card_54"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_54")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 54 + i));
    }
end

rule "Insert address from each Customer_53"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_53")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 53 + i));
    }
end
rule "Insert all accounts from each Customer_53"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_53")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 53 + i));
    }
end
rule "Insert sending account from each Transaction_53"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_53")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 53 + i));
    }
end
rule "Insert receiving account from each Transaction_53"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_53")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 53 + i))
    }
end
rule "Insert owner from each Credit card_53"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_53")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 53 + i));
    }
end

rule "Insert address from each Customer_52"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_52")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 52 + i));
    }
end
rule "Insert all accounts from each Customer_52"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_52")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 52 + i));
    }
end
rule "Insert sending account from each Transaction_52"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_52")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 52 + i));
    }
end
rule "Insert receiving account from each Transaction_52"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_52")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 52 + i))
    }
end
rule "Insert owner from each Credit card_52"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_52")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 52 + i));
    }
end

rule "Insert address from each Customer_51"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_51")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 51 + i));
    }
end
rule "Insert all accounts from each Customer_51"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_51")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 51 + i));
    }
end
rule "Insert sending account from each Transaction_51"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_51")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 51 + i));
    }
end
rule "Insert receiving account from each Transaction_51"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_51")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 51 + i))
    }
end
rule "Insert owner from each Credit card_51"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_51")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 51 + i));
    }
end

rule "Insert address from each Customer_50"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_50")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 50 + i));
    }
end
rule "Insert all accounts from each Customer_50"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_50")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 50 + i));
    }
end
rule "Insert sending account from each Transaction_50"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_50")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 50 + i));
    }
end
rule "Insert receiving account from each Transaction_50"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_50")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 50 + i))
    }
end
rule "Insert owner from each Credit card_50"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_50")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 50 + i));
    }
end

rule "Insert address from each Customer_49"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_49")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 49 + i));
    }
end
rule "Insert all accounts from each Customer_49"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_49")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 49 + i));
    }
end
rule "Insert sending account from each Transaction_49"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_49")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 49 + i));
    }
end
rule "Insert receiving account from each Transaction_49"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_49")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 49 + i))
    }
end
rule "Insert owner from each Credit card_49"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_49")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 49 + i));
    }
end

rule "Insert address from each Customer_48"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_48")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 48 + i));
    }
end
rule "Insert all accounts from each Customer_48"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_48")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 48 + i));
    }
end
rule "Insert sending account from each Transaction_48"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_48")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 48 + i));
    }
end
rule "Insert receiving account from each Transaction_48"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_48")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 48 + i))
    }
end
rule "Insert owner from each Credit card_48"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_48")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 48 + i));
    }
end

rule "Insert address from each Customer_47"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_47")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 47 + i));
    }
end
rule "Insert all accounts from each Customer_47"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_47")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 47 + i));
    }
end
rule "Insert sending account from each Transaction_47"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_47")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 47 + i));
    }
end
rule "Insert receiving account from each Transaction_47"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_47")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 47 + i))
    }
end
rule "Insert owner from each Credit card_47"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_47")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 47 + i));
    }
end

rule "Insert address from each Customer_46"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_46")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 46 + i));
    }
end
rule "Insert all accounts from each Customer_46"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_46")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 46 + i));
    }
end
rule "Insert sending account from each Transaction_46"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_46")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 46 + i));
    }
end
rule "Insert receiving account from each Transaction_46"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_46")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 46 + i))
    }
end
rule "Insert owner from each Credit card_46"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_46")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 46 + i));
    }
end

rule "Insert address from each Customer_45"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_45")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 45 + i));
    }
end
rule "Insert all accounts from each Customer_45"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_45")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 45 + i));
    }
end
rule "Insert sending account from each Transaction_45"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_45")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 45 + i));
    }
end
rule "Insert receiving account from each Transaction_45"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_45")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 45 + i))
    }
end
rule "Insert owner from each Credit card_45"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_45")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 45 + i));
    }
end

rule "Insert address from each Customer_44"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_44")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 44 + i));
    }
end
rule "Insert all accounts from each Customer_44"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_44")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 44 + i));
    }
end
rule "Insert sending account from each Transaction_44"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_44")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 44 + i));
    }
end
rule "Insert receiving account from each Transaction_44"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_44")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 44 + i))
    }
end
rule "Insert owner from each Credit card_44"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_44")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 44 + i));
    }
end

rule "Insert address from each Customer_43"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_43")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 43 + i));
    }
end
rule "Insert all accounts from each Customer_43"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_43")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 43 + i));
    }
end
rule "Insert sending account from each Transaction_43"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_43")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 43 + i));
    }
end
rule "Insert receiving account from each Transaction_43"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_43")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 43 + i))
    }
end
rule "Insert owner from each Credit card_43"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_43")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 43 + i));
    }
end

rule "Insert address from each Customer_42"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_42")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 42 + i));
    }
end
rule "Insert all accounts from each Customer_42"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_42")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 42 + i));
    }
end
rule "Insert sending account from each Transaction_42"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_42")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 42 + i));
    }
end
rule "Insert receiving account from each Transaction_42"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_42")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 42 + i))
    }
end
rule "Insert owner from each Credit card_42"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_42")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 42 + i));
    }
end

rule "Insert address from each Customer_41"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_41")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 41 + i));
    }
end
rule "Insert all accounts from each Customer_41"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_41")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 41 + i));
    }
end
rule "Insert sending account from each Transaction_41"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_41")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 41 + i));
    }
end
rule "Insert receiving account from each Transaction_41"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_41")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 41 + i))
    }
end
rule "Insert owner from each Credit card_41"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_41")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 41 + i));
    }
end

rule "Insert address from each Customer_40"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_40")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 40 + i));
    }
end
rule "Insert all accounts from each Customer_40"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_40")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 40 + i));
    }
end
rule "Insert sending account from each Transaction_40"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_40")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 40 + i));
    }
end
rule "Insert receiving account from each Transaction_40"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_40")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 40 + i))
    }
end
rule "Insert owner from each Credit card_40"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_40")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 40 + i));
    }
end

rule "Insert address from each Customer_39"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_39")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 39 + i));
    }
end
rule "Insert all accounts from each Customer_39"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_39")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 39 + i));
    }
end
rule "Insert sending account from each Transaction_39"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_39")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 39 + i));
    }
end
rule "Insert receiving account from each Transaction_39"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_39")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 39 + i))
    }
end
rule "Insert owner from each Credit card_39"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_39")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 39 + i));
    }
end

rule "Insert address from each Customer_38"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_38")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 38 + i));
    }
end
rule "Insert all accounts from each Customer_38"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_38")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 38 + i));
    }
end
rule "Insert sending account from each Transaction_38"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_38")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 38 + i));
    }
end
rule "Insert receiving account from each Transaction_38"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_38")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 38 + i))
    }
end
rule "Insert owner from each Credit card_38"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_38")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 38 + i));
    }
end

rule "Insert address from each Customer_37"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_37")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 37 + i));
    }
end
rule "Insert all accounts from each Customer_37"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_37")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 37 + i));
    }
end
rule "Insert sending account from each Transaction_37"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_37")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 37 + i));
    }
end
rule "Insert receiving account from each Transaction_37"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_37")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 37 + i))
    }
end
rule "Insert owner from each Credit card_37"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_37")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 37 + i));
    }
end

rule "Insert address from each Customer_36"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_36")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 36 + i));
    }
end
rule "Insert all accounts from each Customer_36"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_36")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 36 + i));
    }
end
rule "Insert sending account from each Transaction_36"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_36")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 36 + i));
    }
end
rule "Insert receiving account from each Transaction_36"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_36")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 36 + i))
    }
end
rule "Insert owner from each Credit card_36"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_36")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 36 + i));
    }
end

rule "Insert address from each Customer_35"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_35")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 35 + i));
    }
end
rule "Insert all accounts from each Customer_35"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_35")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 35 + i));
    }
end
rule "Insert sending account from each Transaction_35"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_35")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 35 + i));
    }
end
rule "Insert receiving account from each Transaction_35"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_35")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 35 + i))
    }
end
rule "Insert owner from each Credit card_35"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_35")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 35 + i));
    }
end

rule "Insert address from each Customer_34"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_34")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 34 + i));
    }
end
rule "Insert all accounts from each Customer_34"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_34")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 34 + i));
    }
end
rule "Insert sending account from each Transaction_34"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_34")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 34 + i));
    }
end
rule "Insert receiving account from each Transaction_34"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_34")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 34 + i))
    }
end
rule "Insert owner from each Credit card_34"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_34")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 34 + i));
    }
end

rule "Insert address from each Customer_33"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_33")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 33 + i));
    }
end
rule "Insert all accounts from each Customer_33"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_33")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 33 + i));
    }
end
rule "Insert sending account from each Transaction_33"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_33")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 33 + i));
    }
end
rule "Insert receiving account from each Transaction_33"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_33")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 33 + i))
    }
end
rule "Insert owner from each Credit card_33"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_33")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 33 + i));
    }
end

rule "Insert address from each Customer_32"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_32")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 32 + i));
    }
end
rule "Insert all accounts from each Customer_32"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_32")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 32 + i));
    }
end
rule "Insert sending account from each Transaction_32"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_32")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 32 + i));
    }
end
rule "Insert receiving account from each Transaction_32"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_32")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 32 + i))
    }
end
rule "Insert owner from each Credit card_32"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_32")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 32 + i));
    }
end

rule "Insert address from each Customer_31"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_31")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 31 + i));
    }
end
rule "Insert all accounts from each Customer_31"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_31")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 31 + i));
    }
end
rule "Insert sending account from each Transaction_31"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_31")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 31 + i));
    }
end
rule "Insert receiving account from each Transaction_31"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_31")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 31 + i))
    }
end
rule "Insert owner from each Credit card_31"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_31")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 31 + i));
    }
end

rule "Insert address from each Customer_30"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_30")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 30 + i));
    }
end
rule "Insert all accounts from each Customer_30"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_30")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 30 + i));
    }
end
rule "Insert sending account from each Transaction_30"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_30")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 30 + i));
    }
end
rule "Insert receiving account from each Transaction_30"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_30")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 30 + i))
    }
end
rule "Insert owner from each Credit card_30"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_30")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 30 + i));
    }
end

rule "Insert address from each Customer_29"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_29")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 29 + i));
    }
end
rule "Insert all accounts from each Customer_29"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_29")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 29 + i));
    }
end
rule "Insert sending account from each Transaction_29"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_29")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 29 + i));
    }
end
rule "Insert receiving account from each Transaction_29"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_29")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 29 + i))
    }
end
rule "Insert owner from each Credit card_29"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_29")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 29 + i));
    }
end

rule "Insert address from each Customer_28"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_28")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 28 + i));
    }
end
rule "Insert all accounts from each Customer_28"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_28")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 28 + i));
    }
end
rule "Insert sending account from each Transaction_28"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_28")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 28 + i));
    }
end
rule "Insert receiving account from each Transaction_28"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_28")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 28 + i))
    }
end
rule "Insert owner from each Credit card_28"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_28")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 28 + i));
    }
end

rule "Insert address from each Customer_27"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_27")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 27 + i));
    }
end
rule "Insert all accounts from each Customer_27"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_27")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 27 + i));
    }
end
rule "Insert sending account from each Transaction_27"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_27")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 27 + i));
    }
end
rule "Insert receiving account from each Transaction_27"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_27")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 27 + i))
    }
end
rule "Insert owner from each Credit card_27"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_27")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 27 + i));
    }
end

rule "Insert address from each Customer_26"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_26")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 26 + i));
    }
end
rule "Insert all accounts from each Customer_26"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_26")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 26 + i));
    }
end
rule "Insert sending account from each Transaction_26"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_26")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 26 + i));
    }
end
rule "Insert receiving account from each Transaction_26"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_26")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 26 + i))
    }
end
rule "Insert owner from each Credit card_26"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_26")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 26 + i));
    }
end

rule "Insert address from each Customer_25"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_25")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 25 + i));
    }
end
rule "Insert all accounts from each Customer_25"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_25")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 25 + i));
    }
end
rule "Insert sending account from each Transaction_25"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_25")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 25 + i));
    }
end
rule "Insert receiving account from each Transaction_25"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_25")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 25 + i))
    }
end
rule "Insert owner from each Credit card_25"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_25")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 25 + i));
    }
end

rule "Insert address from each Customer_24"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_24")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 24 + i));
    }
end
rule "Insert all accounts from each Customer_24"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_24")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 24 + i));
    }
end
rule "Insert sending account from each Transaction_24"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_24")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 24 + i));
    }
end
rule "Insert receiving account from each Transaction_24"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_24")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 24 + i))
    }
end
rule "Insert owner from each Credit card_24"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_24")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 24 + i));
    }
end

rule "Insert address from each Customer_23"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_23")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 23 + i));
    }
end
rule "Insert all accounts from each Customer_23"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_23")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 23 + i));
    }
end
rule "Insert sending account from each Transaction_23"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_23")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 23 + i));
    }
end
rule "Insert receiving account from each Transaction_23"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_23")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 23 + i))
    }
end
rule "Insert owner from each Credit card_23"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_23")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 23 + i));
    }
end

rule "Insert address from each Customer_22"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_22")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 22 + i));
    }
end
rule "Insert all accounts from each Customer_22"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_22")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 22 + i));
    }
end
rule "Insert sending account from each Transaction_22"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_22")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 22 + i));
    }
end
rule "Insert receiving account from each Transaction_22"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_22")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 22 + i))
    }
end
rule "Insert owner from each Credit card_22"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_22")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 22 + i));
    }
end

rule "Insert address from each Customer_21"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_21")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 21 + i));
    }
end
rule "Insert all accounts from each Customer_21"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_21")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 21 + i));
    }
end
rule "Insert sending account from each Transaction_21"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_21")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 21 + i));
    }
end
rule "Insert receiving account from each Transaction_21"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_21")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 21 + i))
    }
end
rule "Insert owner from each Credit card_21"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_21")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 21 + i));
    }
end

rule "Insert address from each Customer_20"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_20")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 20 + i));
    }
end
rule "Insert all accounts from each Customer_20"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_20")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 20 + i));
    }
end
rule "Insert sending account from each Transaction_20"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_20")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 20 + i));
    }
end
rule "Insert receiving account from each Transaction_20"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_20")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 20 + i))
    }
end
rule "Insert owner from each Credit card_20"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_20")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 20 + i));
    }
end

rule "Insert address from each Customer_19"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_19")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 19 + i));
    }
end
rule "Insert all accounts from each Customer_19"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_19")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 19 + i));
    }
end
rule "Insert sending account from each Transaction_19"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_19")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 19 + i));
    }
end
rule "Insert receiving account from each Transaction_19"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_19")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 19 + i))
    }
end
rule "Insert owner from each Credit card_19"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_19")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 19 + i));
    }
end

rule "Insert address from each Customer_18"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_18")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 18 + i));
    }
end
rule "Insert all accounts from each Customer_18"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_18")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 18 + i));
    }
end
rule "Insert sending account from each Transaction_18"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_18")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 18 + i));
    }
end
rule "Insert receiving account from each Transaction_18"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_18")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 18 + i))
    }
end
rule "Insert owner from each Credit card_18"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_18")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 18 + i));
    }
end

rule "Insert address from each Customer_17"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_17")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 17 + i));
    }
end
rule "Insert all accounts from each Customer_17"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_17")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 17 + i));
    }
end
rule "Insert sending account from each Transaction_17"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_17")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 17 + i));
    }
end
rule "Insert receiving account from each Transaction_17"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_17")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 17 + i))
    }
end
rule "Insert owner from each Credit card_17"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_17")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 17 + i));
    }
end

rule "Insert address from each Customer_16"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_16")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 16 + i));
    }
end
rule "Insert all accounts from each Customer_16"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_16")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 16 + i));
    }
end
rule "Insert sending account from each Transaction_16"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_16")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 16 + i));
    }
end
rule "Insert receiving account from each Transaction_16"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_16")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 16 + i))
    }
end
rule "Insert owner from each Credit card_16"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_16")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 16 + i));
    }
end

rule "Insert address from each Customer_15"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_15")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 15 + i));
    }
end
rule "Insert all accounts from each Customer_15"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_15")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 15 + i));
    }
end
rule "Insert sending account from each Transaction_15"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_15")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 15 + i));
    }
end
rule "Insert receiving account from each Transaction_15"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_15")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 15 + i))
    }
end
rule "Insert owner from each Credit card_15"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_15")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 15 + i));
    }
end

rule "Insert address from each Customer_14"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_14")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 14 + i));
    }
end
rule "Insert all accounts from each Customer_14"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_14")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 14 + i));
    }
end
rule "Insert sending account from each Transaction_14"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_14")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 14 + i));
    }
end
rule "Insert receiving account from each Transaction_14"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_14")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 14 + i))
    }
end
rule "Insert owner from each Credit card_14"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_14")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 14 + i));
    }
end

rule "Insert address from each Customer_13"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_13")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 13 + i));
    }
end
rule "Insert all accounts from each Customer_13"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_13")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 13 + i));
    }
end
rule "Insert sending account from each Transaction_13"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_13")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 13 + i));
    }
end
rule "Insert receiving account from each Transaction_13"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_13")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 13 + i))
    }
end
rule "Insert owner from each Credit card_13"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_13")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 13 + i));
    }
end

rule "Insert address from each Customer_12"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_12")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 12 + i));
    }
end
rule "Insert all accounts from each Customer_12"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_12")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 12 + i));
    }
end
rule "Insert sending account from each Transaction_12"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_12")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 12 + i));
    }
end
rule "Insert receiving account from each Transaction_12"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_12")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 12 + i))
    }
end
rule "Insert owner from each Credit card_12"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_12")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 12 + i));
    }
end

rule "Insert address from each Customer_11"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_11")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 11 + i));
    }
end
rule "Insert all accounts from each Customer_11"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_11")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 11 + i));
    }
end
rule "Insert sending account from each Transaction_11"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_11")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 11 + i));
    }
end
rule "Insert receiving account from each Transaction_11"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_11")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 11 + i))
    }
end
rule "Insert owner from each Credit card_11"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_11")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 11 + i));
    }
end

rule "Insert address from each Customer_10"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_10")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 10 + i));
    }
end
rule "Insert all accounts from each Customer_10"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_10")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 10 + i));
    }
end
rule "Insert sending account from each Transaction_10"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_10")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 10 + i));
    }
end
rule "Insert receiving account from each Transaction_10"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_10")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 10 + i))
    }
end
rule "Insert owner from each Credit card_10"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_10")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 10 + i));
    }
end

rule "Insert address from each Customer_9"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_9")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 9 + i));
    }
end
rule "Insert all accounts from each Customer_9"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_9")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 9 + i));
    }
end
rule "Insert sending account from each Transaction_9"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_9")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 9 + i));
    }
end
rule "Insert receiving account from each Transaction_9"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_9")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 9 + i))
    }
end
rule "Insert owner from each Credit card_9"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_9")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 9 + i));
    }
end

rule "Insert address from each Customer_8"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_8")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 8 + i));
    }
end
rule "Insert all accounts from each Customer_8"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_8")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 8 + i));
    }
end
rule "Insert sending account from each Transaction_8"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_8")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 8 + i));
    }
end
rule "Insert receiving account from each Transaction_8"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_8")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 8 + i))
    }
end
rule "Insert owner from each Credit card_8"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_8")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 8 + i));
    }
end

rule "Insert address from each Customer_7"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_7")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 7 + i));
    }
end
rule "Insert all accounts from each Customer_7"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_7")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 7 + i));
    }
end
rule "Insert sending account from each Transaction_7"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_7")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 7 + i));
    }
end
rule "Insert receiving account from each Transaction_7"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_7")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 7 + i))
    }
end
rule "Insert owner from each Credit card_7"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_7")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 7 + i));
    }
end

rule "Insert address from each Customer_6"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_6")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 6 + i));
    }
end
rule "Insert all accounts from each Customer_6"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_6")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 6 + i));
    }
end
rule "Insert sending account from each Transaction_6"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_6")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 6 + i));
    }
end
rule "Insert receiving account from each Transaction_6"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_6")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 6 + i))
    }
end
rule "Insert owner from each Credit card_6"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_6")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 6 + i));
    }
end

rule "Insert address from each Customer_5"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_5")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 5 + i));
    }
end
rule "Insert all accounts from each Customer_5"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_5")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 5 + i));
    }
end
rule "Insert sending account from each Transaction_5"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_5")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 5 + i));
    }
end
rule "Insert receiving account from each Transaction_5"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_5")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 5 + i))
    }
end
rule "Insert owner from each Credit card_5"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_5")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 5 + i));
    }
end

rule "Insert address from each Customer_4"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_4")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 4 + i));
    }
end
rule "Insert all accounts from each Customer_4"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_4")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 4 + i));
    }
end
rule "Insert sending account from each Transaction_4"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_4")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 4 + i));
    }
end
rule "Insert receiving account from each Transaction_4"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_4")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 4 + i))
    }
end
rule "Insert owner from each Credit card_4"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_4")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 4 + i));
    }
end

rule "Insert address from each Customer_3"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_3")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 3 + i));
    }
end
rule "Insert all accounts from each Customer_3"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_3")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 3 + i));
    }
end
rule "Insert sending account from each Transaction_3"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_3")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 3 + i));
    }
end
rule "Insert receiving account from each Transaction_3"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_3")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 3 + i))
    }
end
rule "Insert owner from each Credit card_3"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_3")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 3 + i));
    }
end

rule "Insert address from each Customer_2"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_2")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 2 + i));
    }
end
rule "Insert all accounts from each Customer_2"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_2")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 2 + i));
    }
end
rule "Insert sending account from each Transaction_2"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_2")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 2 + i));
    }
end
rule "Insert receiving account from each Transaction_2"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_2")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 2 + i))
    }
end
rule "Insert owner from each Credit card_2"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_2")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 2 + i));
    }
end

rule "Insert address from each Customer_1"
no-loop
when
    $cust : Customer(address != null, uuid == "insertFromEachCustomer_1")
then
    insert($cust.address);
    for(int i = 0; i < 1000; i++) {
        insert(new Address("someAddressUuid" + i + 1 + i));
    }
end
rule "Insert all accounts from each Customer_1"
no-loop
when
    $cust : Customer(accounts != null, uuid == "insertFromEachCustomer_1")
then
    for(Account acc : $cust.accounts) {
        acc.owner = $cust;
        insert(acc);
    }
    for(int i = 0; i < 1000; i++) {
        insert(new Account("someAccountUuid" + i + 1 + i));
    }
end
rule "Insert sending account from each Transaction_1"
no-loop
when
    $trans : Transaction(accountFrom != null, uuid == "insertAccountFromEachTransaction_1")
then
    insert($trans.accountFrom)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransactionUuid"  + i + 1 + i));
    }
end
rule "Insert receiving account from each Transaction_1"
no-loop
when
    $trans : Transaction(accountTo != null, uuid == "insertAccountFromEachTransaction_1")
then
    insert($trans.accountTo)
    for(int i = 0; i < 1000; i++) {
        insert(new Transaction("someTransaction2Uuid"  + i + 1 + i))
    }
end
rule "Insert owner from each Credit card_1"
no-loop
when
    $card : CreditCard(owner != null, uuid == "insertOwnerFromEachCreaditCard_1")
then
    insert($card.owner);
    for(int i = 0; i < 1000; i++) {
        insert(new CreditCard("someCreditCardUuid"  + i + 1 + i));
    }
end


