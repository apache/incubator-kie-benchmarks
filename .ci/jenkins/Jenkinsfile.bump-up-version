import org.jenkinsci.plugins.workflow.libs.Library
@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

def repoName = 'incubator-kie-kie-benchmarks'

pipeline {
    agent {
        docker { 
            image env.AGENT_DOCKER_BUILDER_IMAGE
            args env.AGENT_DOCKER_BUILDER_ARGS
        }
    }

    environment {
        BRANCH_HASH = "${util.generateHash(10)}"
    }

    options {
        timestamps()
        timeout(time: 30, unit: 'MINUTES')
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    cleanWs()

                    dir("${repoName}") {
                        deleteDir()
                        checkoutRepo(repoName, getTargetBranch())
                    }
                }
            }
        }
        stage('bump up version') {
            steps {
                script {
                    dir("${repoName}") {
                        String commitMsg = "bumped up ${getUpdateRepoName()} version to ${getVersion()}"
                        String localBranch = "update-${getUpdateRepoName()}-${env.BRANCH_HASH}"
                        githubscm.createBranch(localBranch)
                        maven.mvnSetVersionProperty("version.org.${getUpdateRepoName()}", getVersion())
                        String prLink = commitAndCreatePR(commitMsg, localBranch, "${getTargetBranch()}")
                        sh "git checkout ${getTargetBranch()}"
                        mergeAndPush(prLink, "${getTargetBranch()}")
                        githubscm.removeRemoteBranch('origin', localBranch, getGitAuthorCredsId())
                    }
                }
            }
        }
    }
    post{
        always{
            cleanWs()
        }
    }
}

String getVersion() {
    return params.NEW_VERSION
}

String getUpdateRepoName(){
    return env.UPDATE_REPO_NAME
}

String getGitAuthor() {
    // GIT_AUTHOR can be env or param
    return env.GIT_AUTHOR
}

String getGitAuthorCredsId() {
    return env.AUTHOR_CREDS_ID
}

String getTargetBranch() {
    return env.GIT_BRANCH_NAME
}

void checkoutRepo(String repository, String branch) {
    checkout(githubscm.resolveRepository(repository, getGitAuthor(), branch, false))
    // need to manually checkout branch since on a detached branch after checkout command
    sh "git checkout ${branch}"
}

String commitAndCreatePR(String commitMsg, String localBranch, String targetBranch) {
    def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}"
    githubscm.commitChanges(commitMsg)
    githubscm.pushObject('origin', localBranch, getGitAuthorCredsId())
    return githubscm.createPR(commitMsg, prBody, targetBranch,getGitAuthorCredsId())
}

void mergeAndPush(String prLink, String targetBranch) {
    if (prLink?.trim()) {
        githubscm.mergePR(prLink, getGitAuthorCredsId())
        githubscm.pushObject('origin', targetBranch, getGitAuthorCredsId())
    }
}