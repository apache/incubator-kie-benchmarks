@Library('jenkins-pipeline-shared-libraries')_
import org.jenkinsci.plugins.workflow.libs.Library
import org.kie.jenkins.MavenCommand
import org.kie.jenkins.MavenStagingHelper

AGENT_LABEL="ubuntu"
MVN_TOOL="maven_3.8.6"
JDK_TOOL="jdk_11_latest"
benchmarksRepo="incubator-kie-benchmarks"
GIT_AUTHOR="apache"
TARGET_BRANCH="newBranch"

pipeline {
    agent {
        label "$AGENT_LABEL"
    }
    options {
        timestamps()
    }
    tools {
        maven "$MVN_TOOL"
        jdk "$JDK_TOOL"
    }
    stages {
        stage('CleanWorkspace') {
            steps {
                cleanWs(disableDeferredWipeout: true)
            }
        }
        stage('clone kie-benchmarks') {
            steps {
                script {
                    checkoutKieBenchmarksRepo()
                }
            }
        }
        stage('create new branch') {
            steps {
                dir("${WORKSPACE}/${benchmarksRepo}") {
                    script {
                        githubscm.createBranch(NEW_BRANCH)
                    }
                }
            }
        }
        stage('push new branch') {
            steps {
                dir("${WORKSPACE}/${benchmarksRepo}") {
                    script {
                        githubscm.pushObject('origin', NEW_BRANCH, getGitAuthorPushCredsId())
                    }
                }
            }
        }
    }
    post {
        cleanup {
            cleanWs()
        }
    }
}

void checkoutKieBenchmarksRepo() {
    dir(benchmarksRepo) {
        checkout(githubscm.resolveRepository(benchmarksRepo, GIT_AUTHOR, TARGET_BRANCH, false, getGitAuthorCredsId()))
    }
}

String getGitAuthorCredsId() {
    return env.GIT_AUTHOR_CREDS_ID
}

String getGitAuthorPushCredsId() {
    return env.GIT_AUTHOR_PUSH_CREDS_ID
}
